{"remainingRequest":"C:\\backup\\RNDSDemo\\node_modules\\thread-loader\\dist\\cjs.js??ref--17-1!C:\\backup\\RNDSDemo\\node_modules\\babel-loader\\lib\\index.js??ref--17-2!C:\\backup\\RNDSDemo\\node_modules\\react-native-web\\dist\\cjs\\exports\\PixelRatio\\index.js","dependencies":[{"path":"C:\\backup\\RNDSDemo\\node_modules\\react-native-web\\dist\\cjs\\exports\\PixelRatio\\index.js","mtime":1572943696569},{"path":"C:\\backup\\RNDSDemo\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1575382926455},{"path":"C:\\backup\\RNDSDemo\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1575382927776},{"path":"C:\\backup\\RNDSDemo\\node_modules\\babel-loader\\lib\\index.js","mtime":1574752627091}],"contextDependencies":[],"result":["\"use strict\";exports.__esModule=true;exports.default=void 0;var _Dimensions=_interopRequireDefault(require(\"../Dimensions\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var PixelRatio=function(){function PixelRatio(){}PixelRatio.get=function get(){return _Dimensions.default.get('window').scale;};PixelRatio.getFontScale=function getFontScale(){return _Dimensions.default.get('window').fontScale||PixelRatio.get();};PixelRatio.getPixelSizeForLayoutSize=function getPixelSizeForLayoutSize(layoutSize){return Math.round(layoutSize*PixelRatio.get());};PixelRatio.roundToNearestPixel=function roundToNearestPixel(layoutSize){var ratio=PixelRatio.get();return Math.round(layoutSize*ratio)/ratio;};return PixelRatio;}();exports.default=PixelRatio;module.exports=exports.default;",{"version":3,"sources":["C:/backup/RNDSDemo/node_modules/react-native-web/dist/cjs/exports/PixelRatio/index.js"],"names":["exports","__esModule","default","_Dimensions","_interopRequireDefault","require","obj","PixelRatio","get","scale","getFontScale","fontScale","getPixelSizeForLayoutSize","layoutSize","Math","round","roundToNearestPixel","ratio","module"],"mappings":"AAAA,aAEAA,OAAO,CAACC,UAAR,CAAqB,IAArB,CACAD,OAAO,CAACE,OAAR,CAAkB,IAAK,EAAvB,CAEA,GAAIC,CAAAA,WAAW,CAAGC,sBAAsB,CAACC,OAAO,CAAC,eAAD,CAAR,CAAxC,CAEA,QAASD,CAAAA,sBAAT,CAAgCE,GAAhC,CAAqC,CAAE,MAAOA,CAAAA,GAAG,EAAIA,GAAG,CAACL,UAAX,CAAwBK,GAAxB,CAA8B,CAAEJ,OAAO,CAAEI,GAAX,CAArC,CAAwD,CAe/F,GAAIC,CAAAA,UAAU,CAEd,UAAY,CACV,QAASA,CAAAA,UAAT,EAAsB,CAAE,CAKxBA,UAAU,CAACC,GAAX,CAAiB,QAASA,CAAAA,GAAT,EAAe,CAC9B,MAAOL,CAAAA,WAAW,CAACD,OAAZ,CAAoBM,GAApB,CAAwB,QAAxB,EAAkCC,KAAzC,CACD,CAFD,CAQAF,UAAU,CAACG,YAAX,CAA0B,QAASA,CAAAA,YAAT,EAAwB,CAChD,MAAOP,CAAAA,WAAW,CAACD,OAAZ,CAAoBM,GAApB,CAAwB,QAAxB,EAAkCG,SAAlC,EAA+CJ,UAAU,CAACC,GAAX,EAAtD,CACD,CAFD,CASAD,UAAU,CAACK,yBAAX,CAAuC,QAASA,CAAAA,yBAAT,CAAmCC,UAAnC,CAA+C,CACpF,MAAOC,CAAAA,IAAI,CAACC,KAAL,CAAWF,UAAU,CAAGN,UAAU,CAACC,GAAX,EAAxB,CAAP,CACD,CAFD,CAWAD,UAAU,CAACS,mBAAX,CAAiC,QAASA,CAAAA,mBAAT,CAA6BH,UAA7B,CAAyC,CACxE,GAAII,CAAAA,KAAK,CAAGV,UAAU,CAACC,GAAX,EAAZ,CACA,MAAOM,CAAAA,IAAI,CAACC,KAAL,CAAWF,UAAU,CAAGI,KAAxB,EAAiCA,KAAxC,CACD,CAHD,CAKA,MAAOV,CAAAA,UAAP,CACD,CAxCD,EAFA,CA4CAP,OAAO,CAACE,OAAR,CAAkBK,UAAlB,CACAW,MAAM,CAAClB,OAAP,CAAiBA,OAAO,CAACE,OAAzB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _Dimensions = _interopRequireDefault(require(\"../Dimensions\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * PixelRatio gives access to the device pixel density.\n */\nvar PixelRatio =\n/*#__PURE__*/\nfunction () {\n  function PixelRatio() {}\n\n  /**\n   * Returns the device pixel density.\n   */\n  PixelRatio.get = function get() {\n    return _Dimensions.default.get('window').scale;\n  }\n  /**\n   * No equivalent for Web\n   */\n  ;\n\n  PixelRatio.getFontScale = function getFontScale() {\n    return _Dimensions.default.get('window').fontScale || PixelRatio.get();\n  }\n  /**\n   * Converts a layout size (dp) to pixel size (px).\n   * Guaranteed to return an integer number.\n   */\n  ;\n\n  PixelRatio.getPixelSizeForLayoutSize = function getPixelSizeForLayoutSize(layoutSize) {\n    return Math.round(layoutSize * PixelRatio.get());\n  }\n  /**\n   * Rounds a layout size (dp) to the nearest layout size that corresponds to\n   * an integer number of pixels. For example, on a device with a PixelRatio\n   * of 3, `PixelRatio.roundToNearestPixel(8.4) = 8.33`, which corresponds to\n   * exactly (8.33 * 3) = 25 pixels.\n   */\n  ;\n\n  PixelRatio.roundToNearestPixel = function roundToNearestPixel(layoutSize) {\n    var ratio = PixelRatio.get();\n    return Math.round(layoutSize * ratio) / ratio;\n  };\n\n  return PixelRatio;\n}();\n\nexports.default = PixelRatio;\nmodule.exports = exports.default;"]}]}