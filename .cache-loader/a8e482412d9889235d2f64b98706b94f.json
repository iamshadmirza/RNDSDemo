{"remainingRequest":"C:\\backup\\RNDSDemo\\node_modules\\thread-loader\\dist\\cjs.js??ref--16-1!C:\\backup\\RNDSDemo\\node_modules\\babel-loader\\lib\\index.js??ref--16-2!C:\\backup\\RNDSDemo\\node_modules\\react-native-vector-icons\\lib\\toolbar-android.js","dependencies":[{"path":"C:\\backup\\RNDSDemo\\node_modules\\react-native-vector-icons\\lib\\toolbar-android.js","mtime":1574154624739},{"path":"C:\\backup\\RNDSDemo\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1575382926455},{"path":"C:\\backup\\RNDSDemo\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1575382927776},{"path":"C:\\backup\\RNDSDemo\\node_modules\\babel-loader\\lib\\index.js","mtime":1574752627091}],"contextDependencies":[],"result":["var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=createToolbarAndroidComponent;var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _defineProperty2=_interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));var _regenerator=_interopRequireDefault(require(\"@babel/runtime/regenerator\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf3=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _isEqual=_interopRequireDefault(require(\"lodash/isEqual\"));var _pick=_interopRequireDefault(require(\"lodash/pick\"));var _react=_interopRequireWildcard(require(\"react\"));var _propTypes=_interopRequireDefault(require(\"prop-types\"));var _reactNative=require(\"./react-native\");var _jsxFileName=\"C:\\\\backup\\\\RNDSDemo\\\\node_modules\\\\react-native-vector-icons\\\\lib\\\\toolbar-android.js\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){(0,_defineProperty2.default)(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}var ICON_PROP_NAMES=['iconSize','iconColor','titleColor'];var LOGO_ICON_PROP_NAMES=[].concat(ICON_PROP_NAMES,['logoName']);var NAV_ICON_PROP_NAMES=[].concat(ICON_PROP_NAMES,['navIconName']);var OVERFLOW_ICON_PROP_NAMES=[].concat(ICON_PROP_NAMES,['overflowIconName']);var ACTIONS_PROP_NAMES=[].concat(ICON_PROP_NAMES,['actions']);var arePropsEqual=function arePropsEqual(keys){return function(prevProps,nextProps){return(0,_isEqual.default)((0,_pick.default)(prevProps,keys),(0,_pick.default)(nextProps,keys));};};var areLogoIconPropsEqual=arePropsEqual(LOGO_ICON_PROP_NAMES);var areNavIconPropsEqual=arePropsEqual(NAV_ICON_PROP_NAMES);var areOverflowIconPropsEqual=arePropsEqual(OVERFLOW_ICON_PROP_NAMES);var areActionPropsEqual=arePropsEqual(ACTIONS_PROP_NAMES);function createToolbarAndroidComponent(IconNamePropType,getImageSource){var _class,_temp;return _temp=_class=function(_PureComponent){(0,_inherits2.default)(IconToolbarAndroid,_PureComponent);function IconToolbarAndroid(){var _getPrototypeOf2;var _this;(0,_classCallCheck2.default)(this,IconToolbarAndroid);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=(0,_possibleConstructorReturn2.default)(this,(_getPrototypeOf2=(0,_getPrototypeOf3.default)(IconToolbarAndroid)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={logo:undefined,navIcon:undefined,overflowIcon:undefined,actions:undefined};return _this;}(0,_createClass2.default)(IconToolbarAndroid,[{key:\"componentDidMount\",value:function componentDidMount(){this.updateLogoIconSource();this.updateNavIconSource();this.updateOverflowIconSource();this.updateActionIconSources();}},{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps){if(!areLogoIconPropsEqual(prevProps,this.props)){this.updateLogoIconSource();}if(!areNavIconPropsEqual(prevProps,this.props)){this.updateNavIconSource();}if(!areOverflowIconPropsEqual(prevProps,this.props)){this.updateOverflowIconSource();}if(!areActionPropsEqual(prevProps,this.props)){this.updateActionIconSources();}}},{key:\"updateLogoIconSource\",value:function updateLogoIconSource(){var _this$props,logoName,iconSize,iconColor,titleColor,logo;return _regenerator.default.async(function updateLogoIconSource$(_context){while(1){switch(_context.prev=_context.next){case 0:_this$props=this.props,logoName=_this$props.logoName,iconSize=_this$props.iconSize,iconColor=_this$props.iconColor,titleColor=_this$props.titleColor;if(!logoName){_context.next=8;break;}_context.next=4;return _regenerator.default.awrap(getImageSource(logoName,iconSize,iconColor||titleColor));case 4:logo=_context.sent;this.setState({logo:logo});_context.next=9;break;case 8:if(this.state.logo){this.setState({logo:undefined});}case 9:case\"end\":return _context.stop();}}},null,this);}},{key:\"updateNavIconSource\",value:function updateNavIconSource(){var _this$props2,navIconName,iconSize,iconColor,titleColor,navIcon;return _regenerator.default.async(function updateNavIconSource$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_this$props2=this.props,navIconName=_this$props2.navIconName,iconSize=_this$props2.iconSize,iconColor=_this$props2.iconColor,titleColor=_this$props2.titleColor;if(!navIconName){_context2.next=8;break;}_context2.next=4;return _regenerator.default.awrap(getImageSource(navIconName,iconSize,iconColor||titleColor));case 4:navIcon=_context2.sent;this.setState({navIcon:navIcon});_context2.next=9;break;case 8:if(this.state.navIcon){this.setState({navIcon:undefined});}case 9:case\"end\":return _context2.stop();}}},null,this);}},{key:\"updateOverflowIconSource\",value:function updateOverflowIconSource(){var _this$props3,overflowIconName,iconSize,iconColor,titleColor,overflowIcon;return _regenerator.default.async(function updateOverflowIconSource$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_this$props3=this.props,overflowIconName=_this$props3.overflowIconName,iconSize=_this$props3.iconSize,iconColor=_this$props3.iconColor,titleColor=_this$props3.titleColor;if(!overflowIconName){_context3.next=8;break;}_context3.next=4;return _regenerator.default.awrap(getImageSource(overflowIconName,iconSize,iconColor||titleColor));case 4:overflowIcon=_context3.sent;this.setState({overflowIcon:overflowIcon});_context3.next=9;break;case 8:if(this.state.overflowIcon){this.setState({overflowIcon:undefined});}case 9:case\"end\":return _context3.stop();}}},null,this);}},{key:\"updateActionIconSources\",value:function updateActionIconSources(){var _this$props4,actions,iconSize,iconColor,titleColor,updatedActions;return _regenerator.default.async(function updateActionIconSources$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_this$props4=this.props,actions=_this$props4.actions,iconSize=_this$props4.iconSize,iconColor=_this$props4.iconColor,titleColor=_this$props4.titleColor;_context4.next=3;return _regenerator.default.awrap(Promise.all((actions||[]).map(function(action){if(action.iconName){return getImageSource(action.iconName,action.iconSize||iconSize,action.iconColor||iconColor||titleColor).then(function(icon){return _objectSpread({},action,{icon:icon});});}return Promise.resolve(action);})));case 3:updatedActions=_context4.sent;this.setState({actions:updatedActions});case 5:case\"end\":return _context4.stop();}}},null,this);}},{key:\"render\",value:function render(){return _react.default.createElement(_reactNative.ToolbarAndroid,(0,_extends2.default)({},this.props,this.state,{__source:{fileName:_jsxFileName,lineNumber:142}}));}}]);return IconToolbarAndroid;}(_react.PureComponent),_class.propTypes={logoName:IconNamePropType,navIconName:IconNamePropType,overflowIconName:IconNamePropType,actions:_propTypes.default.arrayOf(_propTypes.default.shape({title:_propTypes.default.string.isRequired,iconName:IconNamePropType,iconSize:_propTypes.default.number,iconColor:_propTypes.default.oneOfType([_propTypes.default.string,_propTypes.default.number]),show:_propTypes.default.oneOf(['always','ifRoom','never']),showWithText:_propTypes.default.bool})),iconSize:_propTypes.default.number,iconColor:_propTypes.default.oneOfType([_propTypes.default.string,_propTypes.default.number]),titleColor:_propTypes.default.oneOfType([_propTypes.default.string,_propTypes.default.number])},_class.defaultProps={iconSize:24},_temp;}",{"version":3,"sources":["C:/backup/RNDSDemo/node_modules/react-native-vector-icons/lib/toolbar-android.js"],"names":["ICON_PROP_NAMES","LOGO_ICON_PROP_NAMES","NAV_ICON_PROP_NAMES","OVERFLOW_ICON_PROP_NAMES","ACTIONS_PROP_NAMES","arePropsEqual","keys","prevProps","nextProps","areLogoIconPropsEqual","areNavIconPropsEqual","areOverflowIconPropsEqual","areActionPropsEqual","createToolbarAndroidComponent","IconNamePropType","getImageSource","state","logo","undefined","navIcon","overflowIcon","actions","updateLogoIconSource","updateNavIconSource","updateOverflowIconSource","updateActionIconSources","props","logoName","iconSize","iconColor","titleColor","setState","navIconName","overflowIconName","Promise","all","map","action","iconName","then","icon","resolve","updatedActions","PureComponent","propTypes","PropTypes","arrayOf","shape","title","string","isRequired","number","oneOfType","show","oneOf","showWithText","bool","defaultProps"],"mappings":"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","sourcesContent":["/* eslint-disable react/no-unused-prop-types */\nimport isEqual from 'lodash/isEqual';\nimport pick from 'lodash/pick';\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { ToolbarAndroid } from './react-native';\n\nconst ICON_PROP_NAMES = ['iconSize', 'iconColor', 'titleColor'];\nconst LOGO_ICON_PROP_NAMES = [...ICON_PROP_NAMES, 'logoName'];\nconst NAV_ICON_PROP_NAMES = [...ICON_PROP_NAMES, 'navIconName'];\nconst OVERFLOW_ICON_PROP_NAMES = [...ICON_PROP_NAMES, 'overflowIconName'];\nconst ACTIONS_PROP_NAMES = [...ICON_PROP_NAMES, 'actions'];\n\nconst arePropsEqual = keys => (prevProps, nextProps) =>\n  isEqual(pick(prevProps, keys), pick(nextProps, keys));\n\nconst areLogoIconPropsEqual = arePropsEqual(LOGO_ICON_PROP_NAMES);\nconst areNavIconPropsEqual = arePropsEqual(NAV_ICON_PROP_NAMES);\nconst areOverflowIconPropsEqual = arePropsEqual(OVERFLOW_ICON_PROP_NAMES);\nconst areActionPropsEqual = arePropsEqual(ACTIONS_PROP_NAMES);\n\nexport default function createToolbarAndroidComponent(\n  IconNamePropType,\n  getImageSource\n) {\n  return class IconToolbarAndroid extends PureComponent {\n    static propTypes = {\n      logoName: IconNamePropType,\n      navIconName: IconNamePropType,\n      overflowIconName: IconNamePropType,\n      actions: PropTypes.arrayOf(\n        PropTypes.shape({\n          title: PropTypes.string.isRequired,\n          iconName: IconNamePropType,\n          iconSize: PropTypes.number,\n          iconColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n          show: PropTypes.oneOf(['always', 'ifRoom', 'never']),\n          showWithText: PropTypes.bool,\n        })\n      ),\n      iconSize: PropTypes.number,\n      iconColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      titleColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    };\n\n    static defaultProps = {\n      iconSize: 24,\n    };\n\n    state = {\n      logo: undefined,\n      navIcon: undefined,\n      overflowIcon: undefined,\n      actions: undefined,\n    };\n\n    componentDidMount() {\n      this.updateLogoIconSource();\n      this.updateNavIconSource();\n      this.updateOverflowIconSource();\n      this.updateActionIconSources();\n    }\n\n    componentDidUpdate(prevProps) {\n      if (!areLogoIconPropsEqual(prevProps, this.props)) {\n        this.updateLogoIconSource();\n      }\n      if (!areNavIconPropsEqual(prevProps, this.props)) {\n        this.updateNavIconSource();\n      }\n      if (!areOverflowIconPropsEqual(prevProps, this.props)) {\n        this.updateOverflowIconSource();\n      }\n      if (!areActionPropsEqual(prevProps, this.props)) {\n        this.updateActionIconSources();\n      }\n    }\n\n    async updateLogoIconSource() {\n      const { logoName, iconSize, iconColor, titleColor } = this.props;\n      if (logoName) {\n        const logo = await getImageSource(\n          logoName,\n          iconSize,\n          iconColor || titleColor\n        );\n        this.setState({ logo });\n        // eslint-disable-next-line react/destructuring-assignment\n      } else if (this.state.logo) {\n        this.setState({ logo: undefined });\n      }\n    }\n\n    async updateNavIconSource() {\n      const { navIconName, iconSize, iconColor, titleColor } = this.props;\n      if (navIconName) {\n        const navIcon = await getImageSource(\n          navIconName,\n          iconSize,\n          iconColor || titleColor\n        );\n        this.setState({ navIcon });\n        // eslint-disable-next-line react/destructuring-assignment\n      } else if (this.state.navIcon) {\n        this.setState({ navIcon: undefined });\n      }\n    }\n\n    async updateOverflowIconSource() {\n      const { overflowIconName, iconSize, iconColor, titleColor } = this.props;\n      if (overflowIconName) {\n        const overflowIcon = await getImageSource(\n          overflowIconName,\n          iconSize,\n          iconColor || titleColor\n        );\n        this.setState({ overflowIcon });\n        // eslint-disable-next-line react/destructuring-assignment\n      } else if (this.state.overflowIcon) {\n        this.setState({ overflowIcon: undefined });\n      }\n    }\n\n    async updateActionIconSources() {\n      const { actions, iconSize, iconColor, titleColor } = this.props;\n      const updatedActions = await Promise.all(\n        (actions || []).map(action => {\n          if (action.iconName) {\n            return getImageSource(\n              action.iconName,\n              action.iconSize || iconSize,\n              action.iconColor || iconColor || titleColor\n            ).then(icon => ({ ...action, icon }));\n          }\n          return Promise.resolve(action);\n        })\n      );\n      this.setState({ actions: updatedActions });\n    }\n\n    render() {\n      return <ToolbarAndroid {...this.props} {...this.state} />;\n    }\n  };\n}\n"]}]}